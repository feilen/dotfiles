#!/usr/bin/python

import argparse
import sys
import math
import os
import re

parser = argparse.ArgumentParser(description='Generate high quality texture mipmaps.')
parser.add_argument('-d', '--dds', action='store_true', help='compress to DDS after scaling')
parser.add_argument('-s', '--size', metavar='pixels', type=int, default=512, help='the size of the largest mipmap')
parser.add_argument('filename', metavar='image', nargs='+', help='image(s) to mipify')
parser.add_argument('-c', '--compress', metavar='N', type=int, default=3, help='compression format (0 = None, 1 = BC1/DXT1, 2 = BC2/DXT3, 3 = BC3/DXT5, 4 = BC3n/DXT5nm, 5 = BC4/ATI1N, 6 = BC5/ATI2N, 7 = RXGB (DXT5), 8 = Alpha Exponent (DXT5), 9 = YCoCg (DXT5), 10 = YCoCg scaled (DXT5))')
parser.add_argument('-f', '--filter', default='lanczos', help='filter to use for resampling, default lanczos')
parser.add_argument('-u', '--unsharpafter', default=0, type=int, help='apply unsharp mask after n images')
parser.add_argument('--nogamma', action='store_true', help='don\'t apply gamma correction to scaling')
parser.add_argument('--extargs', metavar='argument', default='', help='extra arguments to supply to convert after each imgname')
parser.add_argument('--nomips', action='store_true', help='do not generate mipmaps')
parser.add_argument('--colorspace', metavar='argument', default='RGB', help='colorspace to resize in')

arguments = parser.parse_args()
maximgsize = arguments.size

gimpcmd =  "gimp -i -b \"\n"
gimpcmd += "(define (batch-dds filename outputname)\n"
gimpcmd += "    (let* ((image (car (gimp-file-load RUN-NONINTERACTIVE filename filename)))\n"
gimpcmd += "           (drawable (car (gimp-image-get-layers image))))\n"
gimpcmd += "           (file-dds-save RUN-NONINTERACTIVE image drawable outputname outputname " + str(arguments.compress) + " " + ("0" if arguments.nomips else "2") + " 0 0 -1 0 0 0 0 0 1 0 0 )\n"
gimpcmd += "           (gimp-image-delete image)))\n"


for image in arguments.filename:
    basefilename = re.sub('\..*\Z', '', image)
    command = 'convert ' + image + ' -size ' + str(maximgsize) + 'x' + str(maximgsize) + ' xc:blue \\\n' if arguments.dds else 'convert ' + image + ' '
    unsharp = 1
    for s in reversed(range(int(math.log(maximgsize, 2)+1)) if not arguments.nomips else range(int(math.log(maximgsize, 2)), int(math.log(maximgsize, 2)+1)) ):
        command += '\( -clone 0 +repage ' + arguments.extargs + ' '
        if not arguments.nogamma: 
            command += '-colorspace ' + arguments.colorspace + ' '
        command += '-background Transparent -virtual-pixel Transparent '
        command += '-set option:distort:viewport "%[fx:max(w,h)]x%[fx:max(w,h)]-%[fx:max((h-w)/2,0)]-%[fx:max((w-h)/2,0)]" -filter Point -distort SRT 0 +repage '
        command += '-filter ' + arguments.filter + ' -interpolate catrom -gravity Center '
        command += '+distort resize ' + str(int(math.pow(2, s))) + 'x' + str(int(math.pow(2, s))) + ' -extent ' + str(int(math.pow(2, s))) + 'x' + str(int(math.pow(2, s))) + ' '
        if (arguments.unsharpafter >= 0):
            if (unsharp > arguments.unsharpafter):
                command += '-colorspace LAB -channel R -unsharp 0x0.785398+0.7071+0 +channel -colorspace ' + arguments.colorspace + ' '
            unsharp += 1
        if not arguments.nogamma:
            command += '-colorspace sRGB '
        command += '\) \\\n'

    command += '-delete 0 '

    if arguments.dds:
        command += '-gravity NorthWest  ' + basefilename + '.psd' 
    else:
        command += '-gravity NorthWest +append ' + basefilename + '.tga' 
    gimpcmd += '(batch-dds \\\"' + basefilename + '.psd\\\" \\\"' + basefilename + '.dds\\\" ) \n'
    print(command)
    os.system(command)

if arguments.dds:
    gimpcmd += '(gimp-quit 1)"'
    print(gimpcmd)
    os.system(gimpcmd)
    os.remove(basefilename + '.psd')
